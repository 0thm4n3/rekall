Linux support in Rekall
=======================

Linux support in Rekall requires a tailoured profile to the running kernel as
well as the System map file. Rekall calls this system specific information a
"profile".

For linux a profile file is simply a zip file which contains:

- A copy of the System.map file.
- Some source of vtype information. Currently this can be one of:

  - A json file of the generated vtypes. The type can be generated offline by
    running:

    python rekall/plugins/overlays/linux/dwarfparser.py module.ko > module.json

  - The compiled module.ko itself from this directory (This should contain
    debugging symbols). Rekall will read the symbols directly using the
    pyelftools module. The pyelftools can easily be installed using:

    $sudo easy_install-2.7 pyelftools

  - DWARF debugging symbols from the kernel generated using dwarfdump.

Then you can always specify this profile like so:
$ rekal --profile 'Linux64' --profile_file 'ubuntu_8.04.zip' --filename 'ubuntu_8.04.dd'
The Rekall Memory Forensic framework 1.0RC1.

"We can remember it for you wholesale!"

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License.
Linux64:ubuntu_8.04.dd 01:20:57> pslist
-------------------------------> pslist()
  Offset (V)   Name                    PID   PPID    UID    GID      DTB                     Start Time
-------------- -------------------- ------ ------ ------ ------ -------------- ------------------------
0x81001d48c000 init                      1      0      0      0 0x00001c501000 1926-02-11 13:05:11+0000
0x81001d48c7f0 kthreadd                  2      0      0      0 -------------- 1926-02-11 13:05:11+0000
0x81001d48cfe0 migration/0               3      2      0      0 -------------- 1926-02-11 13:05:11+0000
0x81001d48d7d0 ksoftirqd/0               4      2      0      0 -------------- 1926-02-11 13:05:11+0000
...

How to get debugging symbols easily
-----------------------------------

It is always possible to download the debug kernel, or more simply just build a
debug module.

For example, in this directory type:

tools/linux$ make
make -C //lib/modules/2.6.32-8-generic/build CONFIG_DEBUG_INFO=y M=.../tools/linux modules
make[1]: Entering directory `/usr/src/linux-headers-2.6.32-8-generic'
  CC [M]  ..../tools/linux/module.o
  Building modules, stage 2.
  MODPOST 1 modules
  CC      ..../tools/linux/module.mod.o
  LD [M]  ..../tools/linux/module.ko
make[1]: Leaving directory `/usr/src/linux-headers-2.6.32-8-generic'

Now pack all the files into the same zip file:

tools/linux$ zip myprofile.zip module_dwarf.ko /boot/System.map-2.6.32-8-generic

Note that by pre-generating the json file, rekall will load much faster
(because it does not need to parse the dwarf information). It is always
recommended though to also keep the actual module in the zip file in case future
versions of rekall need to regenerate the json file.

Rekall will attempt to load symbols in the following order:
  - json files are loaded first (This is fastest to load).

  - The module symbols are parsed directly using pyelftools.

  - The dwarfdump output is parsed textually (this is the slowest option). Note
    that the output of dwarfdump has changed in the last few years, and
    currently the parser only supports older versions of the dwarfdump output.