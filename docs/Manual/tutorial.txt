---
layout: docs
category: manual
title: Rekall Tutorial
author: Michael Cohen <scudette@gmail.com>
---

:toc:
:icons:
:numbered:
:website: http://www.rekall-forensic.com

The main goals of the Rekall framework are to enhance user experience by making
common tasks easier and more intuitive as well as provide a powerful and capable
interface for automation and performing more complex operations.


Installation
------------

Rekall is distributed both in source form and as a stand alone windows
executable. The executable is already packed with all the dependencies and
libraries and so does not require any external software to run.

To install onto a new system you must first have the following dependencies:

- Python 2.7 from http://www.python.org/

- Install easy install or pip from one of the file releases at
  http://pypi.python.org/pypi/setuptools/[setuptools].  On windows this will
  make the easy_install.exe script available on
  'c:\python27\scripts\easy_install.exe'.

- Now install ipython:

  easy_install ipython

- Install pydistorm3:

 wget https://distorm.googlecode.com/files/distorm3.3-package.zip
 unzip distorm3.3-package.zip
 cd distorm3
 python setup.py build
 sudo python setup.py install


A short Rekall demo
-------------------

This section is a quick tour of the Rekall user interface. The program can still
accept command line options - which we can learn more about by using the --help
option:

-----------------------------------------------------------------------------
$ rekal -h
usage: rekal [-h] [--pager PAGER]
              [--logging {debug,info,warning,critical,error}] [--debug]
              [-p PROFILE] [-f FILENAME] [--renderer RENDERER]
              [--plugin PLUGIN [PLUGIN ...]] [--output OUTPUT] [--overwrite]
              Plugin ...

optional arguments:
  -h, --help            show this help message and exit
  --pager PAGER         The pager to use when output is larger than a screen
                        full.
  --logging {debug,info,warning,critical,error}
                        Logging level to show messages.
  --debug               If set we break into the debugger on error conditions.
  -p PROFILE, --profile PROFILE
                        Name of the profile to load.
  -f FILENAME, --filename FILENAME
                        The raw image to load.
  --renderer RENDERER   The renderer to use. e.g. (TextRenderer,
                        JsonRenderer).
  --plugin PLUGIN [PLUGIN ...]
                        Load user provided plugin bundle.
  --output OUTPUT       Write to this output file.
  --overwrite           Allow overwriting of output files.
-----------------------------------------------------------------------------

Some of the most frequently used flags are described below:

--pager::
The pager can be specified as the program that will be used to inspect the
result of each plugin. Since many plugins produce a great deal of output text, a
pager is often needed. Rekall will write the output to a temporary
file, and launch this program to view it. For example, on windows it is useful
to use notepad to examine the output from each plugin (e.g. '--pager notepad'). On
linux use '--pager less' for example, or even '--pager "gvim -f"'.

--profile::
The '--profile' flag specifies the profile to use. The profile is an operating
system specific collection of struct definitions which are used to parse the
kernel data structures (which vary from version to version). The profile used
must match the operating system version of the image. This parameter is usually
only needed if you are generating your own profile. Profiles are normally
autodetected in Rekall.

--filename::
The '--filename' option is the name of the image to analyse. If you are using
the raw device as provided by the winpmem driver, this will be '\\.\pmem'
(windows) for example or '/dev/pmem' (linux). You almost always want to specify
a filename to operate on.

--renderer::
The '--renderer' option allows the user to specify the output format for the
plugin. Currently supported formats are textual output (default), and json output.

--plugin::
The '--plugin' option allows the user to specify one or more python modules or zip
files which contain third party rekall extension plugins. Each python file
in these plugins will be imported and any plugins defined there will become
available to the tool.

The interactive shell::
If the command is followed by a plugin name, the tool will not use the
interactive shell, but rather run the plugin and exit:

.Example: Running plugin from command line.
-----------------------------------------------------------------------------
$ rekal -f xp-laptop-2005-06-25.img pslist
Offset (V) Name                    PID   PPID   Thds     Hnds   Sess  Wow64 Start                Exit
---------- -------------------- ------ ------ ------ -------- ------ ------ -------------------- --------------------
0x823c87c0 System                    4      0     61     1140 ------  False -                    -
0x81fdf020 smss.exe                448      4      3       21 ------  False 2005-06-25 16:47:28  -
0x81f5a3b8 csrss.exe               504    448     12      596      0  False 2005-06-25 16:47:30  -
0x81f8eb10 winlogon.exe            528    448     21      508      0  False 2005-06-25 16:47:31  -
0x820e0da0 services.exe            580    528     18      401      0  False 2005-06-25 16:47:31  -
...
-----------------------------------------------------------------------------

Some command plugins use additional options specific to their module. You can
read plugin specific help by specifying the '--help' option after the name of the
plugin:

-----------------------------------------------------------------------------
$ rekal -f xp-laptop-2005-06-25.img --profile WinXPSP2x86 pslist --help
usage: rekal pslist [-h] [--kdbg KDBG] [--eprocess EPROCESS [EPROCESS ...]]
                     [--phys_eprocess PHYS_EPROCESS [PHYS_EPROCESS ...]]
                     [--pid PID [PID ...]] [--proc_regex PROC_REGEX]

List processes for windows.

optional arguments:
  -h, --help            show this help message and exit
  --eprocess EPROCESS [EPROCESS ...]
                        Kernel addresses of eprocess structs.
  --phys_eprocess PHYS_EPROCESS [PHYS_EPROCESS ...]
                        Physical addresses of eprocess structs.
  --pid PID [PID ...]   One or more pids of processes to select.
  --proc_regex PROC_REGEX
                        A regex to select a profile by name.
-----------------------------------------------------------------------------

For example to list all the *svchost* processes, we can apply a regex to process
names:

-----------------------------------------------------------------------------
$ rekal -f xp-laptop-2005-06-25.img --proc_regex svc
Offset (V) Name                    PID   PPID   Thds     Hnds   Sess  Wow64 Start                Exit
---------- -------------------- ------ ------ ------ -------- ------ ------ -------------------- --------------------
0x81fa5aa0 svchost.exe             740    580     17      198      0  False 2005-06-25 16:47:32  -
0x81fa8650 svchost.exe             800    580     10      302      0  False 2005-06-25 16:47:33  -
0x81faba78 svchost.exe             840    580     83     1589      0  False 2005-06-25 16:47:33  -
0x81f8dda0 svchost.exe             984    580      6       90      0  False 2005-06-25 16:47:35  -
0x81f6e7e8 svchost.exe            1024    580     15      207      0  False 2005-06-25 16:47:35  -
0x82081da0 svchost.exe            1484    580      6      119      0  False 2005-06-25 16:47:59  -
-----------------------------------------------------------------------------

In order to use the interactive shell, do not specify any plugin to run:

-----------------------------------------------------------------------------
$ rekal -f xp-laptop-2005-06-25.img
The Rekall Memory Forensic framework 1.0RC11.

"We can remember it for you wholesale!"

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License.

In [1]:
-----------------------------------------------------------------------------

The interactive shell marks input lines with an "In [line number]:" format and
output lines are marked as "Out [line number]:". In order to run a plugin simply
type its name and press enter:

-----------------------------------------------------------------------------
In [1]: pslist   <1>
------> pslist() <2>
Offset (V) Name                    PID   PPID   Thds     Hnds   Sess  Wow64 Start                Exit
---------- -------------------- ------ ------ ------ -------- ------ ------ -------------------- --------------------
0x823c87c0 System                    4      0     61     1140 ------  False -                    -
0x81fdf020 smss.exe                448      4      3       21 ------  False 2005-06-25 16:47:28  -
-----------------------------------------------------------------------------

<1> The user enters the bare word pslist as a command.
<2> IPython is configured for auto-execution and assumed the user wants to run a
function called pslist()

Plugins appear as functions in the namespace the shell is running in. IPython
sees the bare word 'pslist' and assumes you mean to run the function
'pslist()'. Running this function will render the output to the screen.

All plugins which are applicable to the current image and profile are also
collected in the variable 'plugins' in the namespace. This means we can use
command line completion to discover all the plugins we could use on the current
image:

-----------------------------------------------------------------------------
In [3]: plugins.[tab][tab]
plugins.callbacks    plugins.handles      plugins.modules      plugins.raw2dmp
plugins.cmdscan      plugins.hashdump     plugins.mutantscan   plugins.regdump
plugins.connections  plugins.hivedump     plugins.null         plugins.sockets
plugins.connscan     plugins.hivescan     plugins.pas2vas      plugins.svcscan
plugins.consoles     plugins.impscan      plugins.pedump       plugins.symlinkscan
-----------------------------------------------------------------------------

To learn more about each of these plugins we can follow the name of the plugin
with a single ?:

-----------------------------------------------------------------------------
In [3]: plugins.pslist?
pslist: List processes for windows.
Lists the processes by following the _EPROCESS.PsActiveList.

In the windows operating system, processes are linked together through a
doubly linked list. This plugin follows the list around, printing
information about each process.

To begin, we need to find any element on the list. This can be done by:

1) Obtaining the _KDDEBUGGER_DATA64.PsActiveProcessHead - debug
   information.

2) Finding any _EPROCESS in memory (e.g. through psscan) and following
   its list.

This plugin supports both approaches.

Parameter                       Documentation
------------------------------ ----------------------------------------------------------------------
physical_eprocess               One or more EPROCESS structs or offsets defined in the physical AS.
pid                             A single pid.
proc_regex                      A regular expression for filtering process name (using
                                _EPROCESS.ImageFileName).
kdbg                            The location of the kernel debugger block (In the physical AS).
kernel_address_space            The kernel address space to use. If not specified, we use the session.
physical_address_space          The physical address space to use. If not specified we use the
                                following options:
                                   1) session.physical_address_space,
                                   2) Guess using the load_as() plugin,
                                   3) Use session.kernel_address_space.base.
profile                         The kernel profile to use for this command.
session                         The session we will use. Many options are taken from the session by
                                default, if not provided. This allows users to omit specifying many
                                options.
output                          Save output to this file.
overwrite                       Must be set to overwrite an output file. You can also set this in the
                                session as a global setting.
renderer                        Use this renderer for the output.
-----------------------------------------------------------------------------

We can now specify the parameters to be passed to the plugin (This is the same
as the command line example above):

.Example: Specifying plugin options in the interactive shell.
-----------------------------------------------------------------------------
In [5]: pslist proc_regex="svc"
------> pslist(proc_regex="svc")
Offset (V) Name                    PID   PPID   Thds     Hnds   Sess  Wow64 Start                Exit
---------- -------------------- ------ ------ ------ -------- ------ ------ -------------------- --------------------
0x81fa5aa0 svchost.exe             740    580     17      198      0  False 2005-06-25 16:47:32  -
0x81fa8650 svchost.exe             800    580     10      302      0  False 2005-06-25 16:47:33  -
0x81faba78 svchost.exe             840    580     83     1589      0  False 2005-06-25 16:47:33  -
0x81f8dda0 svchost.exe             984    580      6       90      0  False 2005-06-25 16:47:35  -
...
-----------------------------------------------------------------------------

[NOTE]
================================================================================
Since important information is already stored in the interactive session between
plugin invocations (e.g. dtb location etc), it is much faster to run plugins
from the interactive session than to run each plugin in turn from the command
line. It is possible to easily write a script for automating the running of
multiple plugins.
================================================================================

The interactive shell is the most powerful and flexible interface and so the
remainder of this tutorial will focus on it.

At the heart of the interactive interface is the session object. The session is
an object which contains information about the current image analysis. Plugins
and the user can store information in the session which will be later used by
other plugins. For example, when running the pslist() plugin, the load_as()
plugin is run to determine the address spaces that should be used. This in turn
calls the find_dtb() plugin which searches for a kernel DTB (used to construct
the kernel address space).

It follows that after running the pslist() plugin for the first time, a number
of new objects are stored in the session, and they can be reused the second time
a pslist() is run. At any time we can view the current session (Note "p" is the
shortcut command for "print"):

-----------------------------------------------------------------------------
In [8]: p session
------> p(session)
Rekall session Started on Wed Aug  8 16:45:07 2012.

Config:
 default_address_space:  <IA32PagedMemory @ 0x24892d0 Kernel AS@0x39000>
 dtb:  233472
 filename:  'xp-laptop-2005-06-25.img'
 kdbg:  [_KDDEBUGGER_DATA64 _KDDEBUGGER_DATA64] @ 0x8054C060
 kernel_address_space:  <IA32PagedMemory @ 0x24892d0 Kernel AS@0x39000>
 last:  <rekall.plugins.windows.filescan.PSScan object at 0x24853d0>
 logging:  'INFO'
 overwrite:  False
 pager:  'less'
 physical_address_space:  <MmapFileAddressSpace @ 0x262a650 xp-laptop-2005-06-25.img>
 profile:  <rekall.plugins.overlays.windows.xp.WinXPSP2x86 object at 0x1d11090>
 renderer:  'TextRenderer'
-----------------------------------------------------------------------------

physical_address_space::
We can see the physical_address_space is an MmapFileAddressSpace instance over
the image file, while the kernel_address_space is an IA32PagedMemory address
space instantiated over the dtb at 0x39000. We can see the last Rekall
plugin run (psscan) here too.

default_address_space::
The default_address_space is the address space that will be used to instantiate
new objects from the interactive shell by default. When reading memory we must
always use an address space. For example, we can use the physical address space
(i.e. the raw image) or a virtual address space (for example, the kernel or any
process's address space). Commonly we spend some time analysing a particular
address space so its useful to set the default_address_space to avoid typing.

For example, suppose we want to examine the _EPROCESS object reported by the
pslist module above for pid 740. We read the virtual offset of the process as
0x81fa5aa0 in the kernel address space. We first create an instance of the
_EPROCESS at the reported offset, and assign it to a variable. We then can
examine all the fields of this struct by using command line completion (double
tab):

-----------------------------------------------------------------------------
In [10]: task = session.profile._EPROCESS(0x81fa5aa0)

In [11]: task.[tab][tab]
Display all 138 possibilities? (y or n)
task.ActiveProcessLinks            task.ReadTransferCount
task.ActiveThreads                 task.RealVadRoot
task.AddressCreationLock           task.RundownProtect
task.AddressSpaceInitialized       task.SeAuditProcessCreationInfo
task.AweInfo                       task.SectionBaseAddress
task.BreakOnTermination            task.SectionObject
task.CloneRoot                     task.SecurityPort
....

In [11]: task.UniqueProcessId
Out[11]:  [unsigned int:UniqueProcessId]: 0x000002E4

In [12]: task.ImageFileName
Out[12]:  [String:ImageFileName]: 'svchost.exe\x00'
-----------------------------------------------------------------------------

When examining a member in a struct (such as '_EPROCESS.ImageFileName') we
receive an instance of a rekall 'BaseObject'. This has both a type
(e.g. 'String') and a name (e.g. 'ImageFileName') as well as a human readable
representation (e.g. svchost.exe).

For example the task object we have has a type of '_EPROCESS' (which is a
struct), and it exists at offset 0x81fa5aa0:

-----------------------------------------------------------------------------
In [13]: task
Out[13]: [_EPROCESS _EPROCESS] @ 0x81FA5AA0
-----------------------------------------------------------------------------

To view the entire object we can print it (you can use the shortcut 'p' as a
shortcut for 'print' - either will work).

-----------------------------------------------------------------------------
In [14]: p task
-------> p(task)
[_EPROCESS _EPROCESS] @ 0x81FA5AA0
  0x00 Pcb                          [_KPROCESS Pcb] @ 0x81FA5AA0
  0x6C ProcessLock                  [_EX_PUSH_LOCK ProcessLock] @ 0x81FA5B0C
  0x70 CreateTime                    [WinTimeStamp:CreateTime]: 0x42BD8AA4 (2005-06-25 16:47:32 )
  0x78 ExitTime                      [WinTimeStamp:ExitTime]: 0x00000000 (-)
  0x80 RundownProtect               [_EX_RUNDOWN_REF RundownProtect] @ 0x81FA5B20
  0x84 UniqueProcessId               [unsigned int:UniqueProcessId]: 0x000002E4
  0x88 ActiveProcessLinks           [_LIST_ENTRY ActiveProcessLinks] @ 0x81FA5B28
  0x90 QuotaUsage                   <Array 3 x unsigned long @ 0x81FA5B30>
  0x9C QuotaPeak                    <Array 3 x unsigned long @ 0x81FA5B3C>
  0xA8 CommitCharge                  [unsigned long:CommitCharge]: 0x000002E7
  0xAC PeakVirtualSize               [unsigned long:PeakVirtualSize]: 0x0402C000
  0xB0 VirtualSize                   [unsigned long:VirtualSize]: 0x03EC9000
  0xB4 SessionProcessLinks          [_LIST_ENTRY SessionProcessLinks] @ 0x81FA5B54
  0xBC DebugPort                    <NoneObject Pointer to [0x00000000] (DebugPort)>
  0xC0 ExceptionPort                <Void Pointer to [0xE175BCA8] (ExceptionPort)>
...
-----------------------------------------------------------------------------

This view shows the layour of the _EPROCESS struct which is overlayed on the
offset 0x81FA5B54. The first column is the relative offset of each member,
followed by the name of each member and a representation of each member. This
representation consists of a type (e.g. _KPROCESS), a name (e.g. Pcb) and a
human readable representation.

Interactive plugins
-------------------
Many plugins are designed to work in the interactive environment since they are
by nature interactive. For example the dump plugin performs a hex dump of a
region of memory:

-----------------------------------------------------------------------------
In [18]: dump?

dump: Hexdump an object or memory location.
Hexdump an object or memory location.

You can use this plugin repeateadely to keep dumping more data using the
"v" (rerun last operation) plugin:

In [2]: dump session.kernel_address_space, 0x814b13b0
------> dump(session.kernel_address_space, 0x814b13b0)
Offset                         Hex                              Data
---------- ------------------------------------------------ ----------------
0x814b13b0 03 00 1b 00 00 00 00 00 b8 13 4b 81 b8 13 4b 81  ..........K...K.

In [3]: v
------> v()
Offset                         Hex                              Data
---------- ------------------------------------------------ ----------------
0x814b1440 70 39 00 00 54 1b 01 00 18 0a 00 00 32 59 00 00  p9..T.......2Y..
0x814b1450 6c 3c 01 00 81 0a 00 00 18 0a 00 00 00 b0 0f 06  l<..............
0x814b1460 00 10 3f 05 64 77 ed 81 d4 80 21 82 00 00 00 00  ..?.dw....!.....

Parameter                       Documentation
------------------------------ ----------------------------------------------------------------------
target                          The object to dump or an address space.
offset                          The offset to start dumping from.
-----------------------------------------------------------------------------

Lets try to dump the hex content of the task object (Note that if no address
space is specified, the default address space from the session is used - in this
case the kernel_address_space):

-----------------------------------------------------------------------------
In [19]: dump 0x81FA5AA0
-------> dump(0x81FA5AA0)
  Offset                         Hex                              Data
---------- ------------------------------------------------ ----------------
0x81fa5aa0 03 00 1b 00 00 00 00 00 10 3c 21 82 10 3c 21 82  .........<!..<!.
0x81fa5ab0 b0 5a fa 81 b0 5a fa 81 00 50 57 0e 00 e0 56 0e  .Z...Z...PW...V.
0x81fa5ac0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
0x81fa5ad0 ac 20 00 00 00 00 00 00 1d 00 00 00 0b 00 00 00  ................
-----------------------------------------------------------------------------

This will produce one pagefull of hex dump. To produce another page, simply
rerun the last plugin using the 'v' plugin:
-----------------------------------------------------------------------------
In [20]: v
-------> v()
  Offset                         Hex                              Data
---------- ------------------------------------------------ ----------------
0x81fa5c70 a6 92 08 00 00 00 00 00 2c 03 00 00 00 00 00 00  ........,.......
0x81fa5c80 e0 7c 00 00 00 00 00 00 00 00 00 00 aa 16 00 00  .|..............
0x81fa5c90 00 00 00 00 b0 1e 0f 82 30 fe 1f 95 a5 79 c5 01  ........0....y..
0x81fa5ca0 00 00 01 00 31 05 00 00 c3 04 00 00 b6 04 00 00  ....1...........
-----------------------------------------------------------------------------

The Rekall Session
------------------

Rekall uses a `Session` to encapsulate analysis a single interactive analysis
session. The reason Rekall is so fast is because information is cached in the
session. Normally when running from the interactive console, the session
persists in memory and therefore, the cache remains available for subsequent
modules.

For example, when running the `pslist` module, Rekall caches all the known
processes within the image. This cache is then subsequently used by all plugins
which require process listing information (e.g. those plugins which can be
filtered by process id, process name, etc).

You can see this by printing the session object:
-----------------------------------------------------------------------------
win7.elf 22:57:28> print session
Rekall Memory Forensics session Started on Tue Jun 17 22:57:30 2014.

Config:
{
  autodetect_threshold = 1.0
  base_filename = win7.elf
  buffer_size = 20971520
  cache = {
    ObjectTypeMap = <Array 0 x Pointer @ 0xF80002841300>
    PsActiveProcessHead = [_LIST_ENTRY _LIST_ENTRY] @ 0xF8000283EB30
    default_address_space = AMD64PagedMemory@0x00187000 (Kernel AS@0x187000)
    idle_process = [_EPROCESS _EPROCESS] @ 0x02818140 (pid=0)
    kernel_base = 272678923661312
    pslist_cache = {'Handles': set([275427700679504, 4, 275427701205808, 275427706255504, 275427701697328, 275427705361984, 275427697963104, 275427706065648, 275427702292576, 27542770046756, 275427696760304, 275427700103984, 275427703556656, 275427703140448, 275427707650448, 275427701734192])}
  }
  debug = False
  dtb = 1601536
  ept = None
  filename = /home/scudette/images/win7.elf
  help = False
  ipython_engine = None
  no_autodetect = False
  nocolors = False
  notebook_dir = /home/scudette/Worksheets/
  output = None
  pager = None
  paging_limit = None
  plugin = []
  profile = <AMD64 profile nt/GUID/F8E2A8B5C9B74BF4A6E4A48F180099942 (Nt)>
  profile_autodetect = True
  profile_path = ['https://raw.githubusercontent.com/google/rekall-profiles/master',
                  'http://profiles.rekall-forensic.com']
  renderer = TextRenderer
  run = None
  session_filename = None
  timezone = UTC
  verbose = True
}
-----------------------------------------------------------------------------

As can be been above, the session stores not only the `pslist_cache`, but also
the profile (as discovered by profile autodetection) as well as configuration
parameters such as the location of the profile repository.

Saving the session
~~~~~~~~~~~~~~~~~~

In order to save time the next time this image is examined, we can save the
session to disk. This essentially serializes the session cache, configuration
and the results of previous plugins. To do this we can tell Rekall to use a file
as the cache using the `-s` flag. This will cause Rekall to store the session
after it exists and reloads it at start up time.


The below example shows that the first time we run the `pslist` plugin it takes
significantly longer since it needs to actually list all processes using all
supported methods, while the next time it is much faster since the process
listing is coming from cache. Note also that on subsequent executions we do not
need to provide any information to Rekall (such as the image filename) since it
can read that information from the stored session.

-----------------------------------------------------------------------------
$ time rekal -v -f ~/images/win7.elf -s my_session.rekall pslist
....
INFO:root:Detected kernel base at 0xF8000261F000
DEBUG:root:Listed 41 processes using PsActiveProcessHead
DEBUG:root:Listed 37 processes using CSRSS
DEBUG:root:Listed 41 processes using PspCidTable
DEBUG:root:Listed 39 processes using Sessions
DEBUG:root:Listed 40 processes using Handles
0xfa80008959e0 System                    4      0     84      511 ------  False 2012-10-01 21:39:51+0000 -
...
INFO:root:Saving session to my_session.rekall

real             0m3.051s
user             0m2.576s
sys              0m0.289s
$ time rekal -v -s my_session.rekall pslist
0xfa80008959e0 System                    4      0     84      511 ------  False 2012-10-01 21:39:51+0000 -
.....
real           0m1.090s
user           0m0.830s
sys            0m0.093s
-----------------------------------------------------------------------------

[NOTE]
The on disk version of the session is considered an ephemeral cache of the
session data. We do not consider this a stable interchange format. This means
that we do not guarantee compatibility with future versions of Rekall. At best
the session file is merely a cache which can be deleted and recreated at any
time. The content of the file is also not considered user viewable and should
not be edited manually.

Automating Rekall
-----------------

One of our main design goals is the automation of Rekall so it can be used from
external programs easily, as well as making it easier to write custom scripts.

This section demonstrates how to automate the framework, both by embedding it a
completely inside another application, as well as simply automating the analysis
from rekall itself.

Example: Embedding Rekall in an external python program
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In this example we will run the pslist plugin on a sample image, capture the
text table into a string and then print this string (In a real example, this
could be served over a HTTP or whatever).

The basic sequence of steps is:

Create a session object::
 All interactions with the rekall library require a session object. The
 session object keeps information related to the same image. There can be any
 number of session objects valid at the same time - no data is global.

Create an appropriate renderer object::
 All output is rendered using a renderer. A renderer is an abstraction which is
 able to format the output in some way. For example, the TextRenderer outputs
 tables of text, while the JSONRenderer outputs json blobs.

Instantiate the plugin::
 The plugin is simply an object which can be instantiated using various
 parameters.

Render the plugin into the renderer::
 Calling the plugin's render method with a valid renderer will cause it to
 execute its analysis and output into this renderer.


[source,python,numbered]
.Example of embedding Rekall in a python application
-----------------------------------------------------------------------------
import logging

from rekall import session
from rekall import plugins                           # <1>

# Setup logging as required. Rekall will log to the standard logging service.
logging.basicConfig(level=logging.DEBUG)

s = session.Session(                                 # <2>
  filename="win7.elf",
  autodetect=["rsds"],
  logger=logging.getLogger(),
  profile_path=[
     "http://profiles.rekall-forensic.com"
  ])

print s.plugins.pslist(method="PsActiveProcessHead") # <3>

-----------------------------------------------------------------------------

<1> Importing the plugins is required to make rekall load all the default
    plugins. At this point any third party plugins will need to be imported too.
<2> The session object is created with initial values for some parameters. It is
    critical that Rekall is able to contact the profile repository at runtime,
    therefore you will need to provide a valid repository address here. If you
    plan to use autodetection (you should) here is where the relevant methods
    should be specified.
<3> The plugin is instantiated from the session object. When a plugin instance
    is printed, it renders its output to the console by default.


Example: Using a custom address space
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Sometimes the image files to be analyzed are not directly written to disk. For
example, they may be available as a python file-like object. In this case we
want to provide this "virtual image" to Rekall for analysis, but wrapping it in
a 'FDAddressSpace'.

For example consider the following code which provides the image as a python
file-like object (For this example we directly open the file).

[source,python,numbered]
.Example of embedding Rekall in a python application
-----------------------------------------------------------------------------
import logging
from rekall import plugins
from rekall import session
from rekall.plugins.addrspaces import standard

# Setup logging as required. Rekall will log to the standard logging service.
logging.basicConfig(level=logging.DEBUG)

s = session.Session(                                      # <1>
    autodetect=["rsds"],
    logger=logging.getLogger(),
    profile_path=[
        "http://profiles.rekall-forensic.com"
    ])

with s:                                                   # <2>
    s.physical_address_space = standard.FDAddressSpace(fhandle=open(
            "/home/scudette/images/win7x86.raw"), session=s)
    s.GetParameter("profile")                             # <3>

print s.plugins.pslist(method="PsActiveProcessHead")

-----------------------------------------------------------------------------

<1> We create a session but do not provide a filename.

<2> Using the `with` operator we can directly add the FDAddressSpace() as the
    physical address space to the session.

<3> This step triggers the profile autodetection code which looks at the
    physical address space, figures out the profile and enables all the active
    plugins which work with this profile.


Example: Automating the Rekall Console
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Much of the time the Rekall interactive interface is sufficient for most
analysis. Sometimes, however, we need to automate some of this
analysis.

In this section, we see how interactive scripts can be written to automate
Rekall. This is similar to Embedding in an external program, except that the
script runs within the interactive session. When the script completes, the
interactive session resumes.

For this example, we search for all processes with a name of 'python.exe' and
dump them into the temporary directory with their timestamps. This could be used
for example to dump periodic snapshots of a process from a live system.

First we create the following python file named 'dumper.py':

[source,python,numbered]
.Example interactive python script.
-----------------------------------------------------------------------------
import time

pslist = session.plugins.pslist(proc_regex="python.exe")
pedumper = session.plugins.pedump()

for task in pslist.filter_processes():
    outfd = open("/tmp/%s-%s.exe" % (time.time(), task.UniqueProcessId),
                 "wb")
    pedumper.WritePEFile(fd=outfd,
                         address_space=task.get_process_address_space(),
                         image_base=task.Peb.ImageBaseAddress)
-----------------------------------------------------------------------------

Now we run this file directly from the interactive shell.
-----------------------------------------------------------------------------
$ rekal -f \\.\pmem
...

In [1]: run -i dumper.py  <1>
In [2]: ls -l

total 300
-rw-r----- 1 user group  57344 2012-08-27 00:28 1346020082.17-4012.exe
....
-----------------------------------------------------------------------------

<1> Running the script with the -i flag ensures that the script receives the
same namespace as the interactive shell. This means that it can use the same
session and we can see all variables defined by the script.


[IMPORTANT]
================================================================================
In the interactive shell IPython will automatically attempt to execute plugins
without requiring the brackets to be present - this is merely a usability
feature. In reality all input is interpreted as python code.

This means that while in the interactive shell it is sufficient to just type
'pslist', when running an external script, you will need to explicitly call the
function as 'pslist()'.
================================================================================


Extending Rekall
~~~~~~~~~~~~~~~~

Extending Rekall is most useful when you want to add additional functionality
which should be reused by other people, or contributed to the core. If you are
just interested in automating a very specific analysis, an interactive shell
script is sufficient usually, and is simple to write.

There are a number of different components which can be extended these fall
roughly into these categories:

Address Spaces::
  Address spaces are the way Rekall implements image reading. Most of the
  time you will want to implement some kind of support for new image files.

Renderers::
  All output in Rekall is performed through an abstract renderer. For
  specialist output (e.g. HTML or XML), a new renderer should be written. See
  'BaseRenderer' and 'TextRenderer' as possible examples.

Profiles and specialized parsers::
  Profiles are used by Rekall to parse data structures. Sometimes plugin
  authors wish to extend the parsing system by providing definitions for new
  types, or additional behaviors via new object classes.

Plugins::
  A plugin is a reusable component which is available in the interactive
  session. A plugin should only be written if it can be widely useful and/or can
  be reused by other plugins. It is normally not necessary to write a plugin to
  automate Rekall (e.g. search for a specific malware).
